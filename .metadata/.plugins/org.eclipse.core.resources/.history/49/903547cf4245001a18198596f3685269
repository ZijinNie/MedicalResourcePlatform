package mchacks9.wuhan.controller;

import java.sql.Time;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import mchacks9.wuhan.dto.*;
import mchacks9.wuhan.model.*;
import mchacks9.wuhan.satausEnum.*;

import mchacks9.wuhan.service.PlatformService;

@CrossOrigin(origins = "*")
@RestController
public class Controller {
	@Autowired
	private PlatformService service;

	@GetMapping(value = {"/requests"})
	public List<RequestDto> getAllRequests(){
		List<RequestDto> requestDtos = new ArrayList<>();
		for(Request r : service.getAllRequests()) {
			requestDtos.add(convertDto(r));
		}
		return requestDtos;
	}

	@GetMapping(value = {"/hospitals/{username}"})
	public HospitalDto getHospital(@PathVariable("username") String username
			) {
		Hospital h = service.getHospital(username);
		if(h == null) throw new IllegalArgumentException("Cannot find hospital");
		return convertDto(h);
	}

	@PostMapping(value = {"/makeRequest"})
	public RequestDto makeRequest(@RequestParam(name = "username") String username,
			@RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.TIME, pattern = "YYYY:MM:DD:HH:mm") Time time,
			@RequestParam(name = "emerStatus") String emerStatus,
			@RequestParam(name = "fulfillStatus") String fulfillStatus,
			@RequestParam(name = "items") List<ItemEntryDto> itemsDto) throws IllegalArgumentException{
		Hospital h = service.getHospital(username);

		if(h==null) throw new IllegalArgumentException("Cannot find hospital");

		Request r = new Request(h, time, convertEmerEnum(emerStatus));
		List<ItemEntry> items= new ArrayList<ItemEntry>();
		ItemEntry i;
		for(ItemEntryDto item: itemsDto) {
			i = service.getItemEntry(item.getIeid());
			items.add(i);
		}
		return convertDto(r);
	}

//	@PostMapping(value = {"/makeRequest/allFilled"})
//	public RequestDto makeRequest(@RequestParam(name = "request") RequestDto rDto) throws IllegalArgumentException{
//		RequestDto rDto = new RequestDto();
//
//	}

	@PostMapping(value = {"/register"})
	public HospitalDto register(@RequestParam String username,
	@RequestParam String password,
	@RequestParam String name,
	@RequestParam String city,
	@RequestParam String state,
	@RequestParam String strAddr,
	@RequestParam String description,
	@RequestParam String contact) throws IllegalArgumentException{

		Hospital hospital = service.createHospital(username, password, name, city, state, strAddr, description, contact);
		return convertDto(hospital);
	}


	private String convertEmerEnum(EmergencyStatus s) {
		String res = "";
		if (s == EmergencyStatus.LOW) {
			res = "Low";
		}else if (s == EmergencyStatus.MEDIAN) {
			res = "Median";
		}else if (s == EmergencyStatus.HIGH) {
			res = "High";
		}
		return res;
	}

	private EmergencyStatus convertEmerEnum(String s) {
		if (s == "Low") {
			return EmergencyStatus.LOW;
		}else if (s == "Median") {
			return EmergencyStatus.MEDIAN;
		}else if (s == "High") {
			return EmergencyStatus.HIGH;
		}else {
			return EmergencyStatus.LOW;
		}
	}

	private String convertFulfEnum(FulfillStatus s) {
		String res = "";
		if (s == FulfillStatus.CANCELLED) {
			res = "Cancelled";
		}else if (s == FulfillStatus.FULFILLED) {
			res = "Fullfilled";
		}else if (s == FulfillStatus.ONGOING) {
			res = "Ongoing";
		}
		return res;
	}

	private FulfillStatus convertFulfEnum(String s) {
		if (s == "Cancelled") {
			return FulfillStatus.CANCELLED;
		}else if (s == "Fullfilled") {
			return FulfillStatus.FULFILLED;
		}else if (s == "Ongoing") {
			return FulfillStatus.ONGOING;
		}else {
			return FulfillStatus.CANCELLED;
		}
	}

	private RequestDto convertDto(Request r) {
		List<ItemEntry> ies = r.getItems();
		List<ItemEntryDto> ieDtos = new ArrayList<ItemEntryDto>();
		for (ItemEntry ie: ies) {
			ieDtos.add(convertpDto(ie));
		}

		return new RequestDto(r.getRid(),r.getPosttime(),convertEmerEnum(r.getEmerStatus()),
				convertFulfEnum(r.getFulfillStatus()),convertDto(r.getHospital()),ieDtos);
	}

	private ItemEntryDto convertpDto(ItemEntry ie) {
		return new ItemEntryDto(ie.getIeid(), ie.getQuantity());
	}

	private ItemDto convertDto(Item i) {
		return new ItemDto(i.getIid(),i.getName(),i.getDescription());
	}

	private ItemEntryDto convertDto(ItemEntry ie) {
		return new ItemEntryDto(ie.getIeid(), ie.getQuantity(), convertDto(ie.getItem()), convertDto(ie.getRequest()));
	}

	private HospitalDto convertDto(Hospital h) {
		List<Request> rs = h.getRequests();
		List<RequestDto> rDtos = new ArrayList<RequestDto>();
		for (Request r: rs) {
			rDtos.add(convertpDto(r));
		}
		return new HospitalDto(h.getUsername(), h.getPassword(), h.getName(), h.getCity(), h.getState(),
				h.getStrAddr(), h.getDescription(), h.getContact(), rDtos);
	}

	private RequestDto convertpDto(Request r) {
		return new RequestDto(r.getRid(),r.getPosttime(),convertEmerEnum(r.getEmerStatus()),
				convertFulfEnum(r.getFulfillStatus()));
	}


}
